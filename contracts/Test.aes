namespace Lib =
    type data = int


contract RemoteTest =
    entrypoint test_remote : (int) => int

contract Test =
    type number = int
    type string_map = map(string, int)
    type box('a) = 'a

    type oracle_id = oracle(string, int)
    type query_id  = oracle_query(string, int)

    record point = {x: int, y: int}
    record rectangle = {origin: point, a: int, b: int}

    datatype really_t = Nope | No | Yep(int) | Yes
    datatype amount_t('a, 'b) = Zero | Any('a, 'b, int, 'a)

    entrypoint test_empty () = 1
    entrypoint test_bool (a:bool, b:bool) = a
    entrypoint test_single_int (a:int) = a
    entrypoint test_int (a:int, b:int, c:int, d:int) = a
    entrypoint test_bytes (a:bytes(2)) = a
    entrypoint test_account_address (a:address) = a
    entrypoint test_contract_address (a:RemoteTest) = a
    entrypoint test_oracle_address (a:oracle_id) = a
    entrypoint test_oracle_query_address (a:query_id) = a
    entrypoint test_bits (a:bits) = a
    entrypoint test_string (a:string) = a
    entrypoint test_list (a:list(int)) = a
    entrypoint test_nested_list (a:list(list(int))) = a
    entrypoint test_simple_map (a: map(int, bool)) = a
    entrypoint test_nested_map (a: map(int, map(int, bool))) = a
    entrypoint test_variants (a:really_t) = a
    entrypoint test_template_variants (a:amount_t(int, bool)) = a
    entrypoint test_tuple (a: bool * bool) = a
    entrypoint test_nested_tuple (a: (bool * bool) * (bool * bool)) = a
    entrypoint test_record(a: point) = a
    entrypoint test_nested_record(a: rectangle) = a
    entrypoint test_int_type(a: number) = a
    entrypoint test_map_type(a: string_map) = a
    entrypoint test_template_type(a: box(int)) = a
    entrypoint test_template_maze(a: amount_t(box(rectangle), really_t)) = a
    entrypoint test_lib_type(a:Lib.data) = a
    entrypoint test_optional(a:option(int)) = a
